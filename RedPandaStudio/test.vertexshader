#version 450 core

layout(location = 0) in vec4 vertexPosition;
layout(location = 1) in vec3 vertexNormal;
layout(location = 2) in vec2 UV;

uniform mat4 ModelMatrix;
uniform mat4 ViewMatrix;
uniform mat4 ProjectionMatrix;

varying vec4 v_Color;
varying vec2 UV_Coordinates;

void main()
{
    vec4 LightPos = ViewMatrix*vec4( -100, 5, -90, 1);
    vec3 P = vec3(ViewMatrix * ModelMatrix * vertexPosition);	            // Posición del vértice
	vec3 N = vec3(ViewMatrix * ModelMatrix * vec4(vertexNormal, 0.0));    // Normal del vértice

	float d = length(LightPos.xyz - P);			        // distancia de la luz
	vec3  L = normalize(LightPos.xyz - P);			    // Vector Luz

	float ambient = 0.15;                               // (15% de int. ambiente)
	float diffuse = 0.0;

    diffuse = max(dot(N, L), 0.0);		            // Cálculo de la int. difusa
    // Cálculo de la atenuación
    float attenuation = 80.0/(0.25+(0.01*d)+(0.003*d*d));
    diffuse = diffuse*attenuation;

    v_Color = vec4(0.4, 0.4, 0.0, 1.0) * (ambient + diffuse);

    gl_Position = ProjectionMatrix * ViewMatrix * ModelMatrix * vertexPosition;

    UV_Coordinates = UV;



}